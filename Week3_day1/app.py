# app.py
# -------------------------------------------
# Streamlit app: Ask GPT-4o about an uploaded image
# -------------------------------------------

# How to run:
#   1) pip install streamlit openai pillow
#   2) streamlit run app.py

import base64
from io import BytesIO

import streamlit as st
from PIL import Image
from openai import OpenAI


# ---------- Page setup ----------
st.set_page_config(page_title="Ask GPT-4o About an Image", page_icon="üñºÔ∏è", layout="centered")
st.title("üñºÔ∏è Ask GPT-4o About an Image")

st.caption(
    "Upload an image (diagram, chart, handwritten note, etc.), enter a question, "
    "and get a clear, step-by-step explanation generated by GPT-4o."
)


# ---------- Sidebar: API key ----------
# st.sidebar.header("API Key")
# api_key = st.sidebar.text_input(
#     "OpenAI API key",
#     value=st.secrets.get("OPENAI_API_KEY", ""),
#     type="password",
#     placeholder="sk-...",
#     help="For production, prefer Streamlit secrets. Locally, paste your key here."
# )

# api_key = st.secrets.get("OPENAI_KEY")  # reads from .streamlit/secrets.toml
# api_key = "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"

api_key = st.secrets.get("OPENAI_KEY")
# print( "api_key123", api_key)

if not api_key:
    st.error("‚ö†Ô∏è OpenAI API key not found in secrets.toml. Please add it under OPENAI_KEY.")
# else:
#     client = OpenAI(api_key=api_key)

# Optional settings
st.sidebar.header("Settings")
system_prompt = st.sidebar.text_area(
    "System prompt",
    value="You are a clear, step-by-step tutor. Explain reasoning and the final answer succinctly.",
    help="Controls the assistant‚Äôs tone and structure."
)
max_output_tokens = st.sidebar.number_input(
    "Max output tokens (optional)", min_value=0, max_value=4000, value=800, step=50
)


# ---------- Helpers ----------
def guess_mime(name_or_mimetype: str) -> str:
    """Return a short image mime (png/jpeg/webp/gif) for a filename or an existing mimetype string."""
    s = (name_or_mimetype or "").lower()
    if s.endswith((".jpg", ".jpeg")) or "jpeg" in s:
        return "jpeg"
    if s.endswith(".png") or "png" in s:
        return "png"
    if s.endswith(".webp") or "webp" in s:
        return "webp"
    if s.endswith(".gif") or "gif" in s:
        return "gif"
    return "png"  # safe default


def to_data_url(image_bytes: bytes, mime_short: str = "png") -> str:
    """Encode bytes to base64 data URL format acceptable in image_url."""
    b64 = base64.b64encode(image_bytes).decode("utf-8")
    return f"data:image/{mime_short};base64,{b64}"


def ask_gpt4o_about_image(
    client: OpenAI,
    image_data_url: str,
    question: str,
    system_message: str,
    max_tokens: int | None = None,
) -> str:
    """Send system + (user text + image) to GPT-4o via Responses API and return clean text."""
    kwargs = {
        "model": "gpt-4o",
        "input": [
            {"role": "system", "content": system_message},
            {
                "role": "user",
                "content": [
                    {"type": "input_text", "text": question},
                    {"type": "input_image", "image_url": image_data_url},
                ],
            },
        ],
    }
    if max_tokens and max_tokens > 0:
        kwargs["max_output_tokens"] = int(max_tokens)

    resp = client.responses.create(**kwargs)

    # Prefer convenience accessor if available
    text = getattr(resp, "output_text", None)
    if text:
        return text.strip()

    # Fallback: collect text pieces
    parts = []
    for o in getattr(resp, "output", []):
        if getattr(o, "type", None) == "message":
            for c in getattr(o, "content", []):
                if c.get("type") == "output_text":
                    parts.append(c.get("text", ""))
    return "\n".join(parts).strip()


# ---------- Main UI ----------
uploaded_file = st.file_uploader(
    "Upload an image", type=["png", "jpg", "jpeg", "webp", "gif"], accept_multiple_files=False
)

if uploaded_file:
    # Read bytes and preview
    image_bytes = uploaded_file.read()
    mime_short = guess_mime(uploaded_file.type or uploaded_file.name)
    try:
        img = Image.open(BytesIO(image_bytes))
        st.image(img, caption=f"Preview: {uploaded_file.name} ‚Ä¢ {img.size[0]}√ó{img.size[1]} ‚Ä¢ {img.mode}", use_container_width=True)
    except Exception:
        st.warning("Could not preview the uploaded file as an image, but will still attempt to send it.")

    # Prompt input (Streamlit equivalent to input())
    question = st.text_area(
        "Your question about this image",
        placeholder="e.g., ‚ÄúCan you explain how to solve the equation in this photo?‚Äù",
    )

    run = st.button("Ask GPT-4o")

    if run:
        if not api_key:
            st.error("Please provide your OpenAI API key in the sidebar.")
        elif not question.strip():
            st.error("Please enter a question.")
        else:
            with st.spinner("Thinking‚Ä¶"):
                try:
                    client = OpenAI(api_key=api_key)
                    image_data_url = to_data_url(image_bytes, mime_short)
                    answer = ask_gpt4o_about_image(
                        client=client,
                        image_data_url=image_data_url,
                        question=question.strip(),
                        system_message=system_prompt.strip(),
                        max_tokens=max_output_tokens or None,
                    )
                    st.markdown("### ‚úÖ GPT-4o Response")
                    st.write(answer if answer else "_No text returned._")
                except Exception as e:
                    st.error(f"Request failed: {e}")
else:
    st.info("Upload an image to begin.")
